@model RandomShop.Models.Cart.CartViewModel

@{
    ViewData["Title"] = "Your Shopping Cart";
}

<h2>Your Shopping Cart</h2>

@if (!Model.Items.Any())
{
    <p>Your cart is empty.</p>
}
else
{
    <form id="antiForgeryForm">@Html.AntiForgeryToken()</form>

    <table class="table align-middle">
        <thead>
        <tr>
            <th></th> <!-- Remove icon -->
            <th>Product</th>
            <th>Unit Price</th>
            <th>Quantity</th>
            <th>Total</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var item in Model.Items)
        {
            <tr data-item-id="@item.ProductItemId">
                <td>
                    <form asp-controller="Cart" asp-action="Remove" asp-route-id="@item.ProductItemId" method="post"
                          style="display:inline;">
                        @Html.AntiForgeryToken()
                        <button type="submit" class="btn btn-link text-danger p-0" title="Remove item">
                            <i class="fas fa-times"></i>
                        </button>
                    </form>
                </td>
                <td>
                    <a asp-controller="Product"
                       asp-action="Details"
                       asp-route-id="@item.ProductItemId"
                       class="text-decoration-none text-dark fw-semibold">
                        @item.ProductName
                    </a>
                </td>
                <td class="unit-price">@item.UnitPrice.ToString("C")</td>
                <td>
                    <input type="number"
                           class="form-control form-control-sm quantity-input"
                           value="@item.Quantity"
                           min="1"
                           style="width:80px;"/>
                </td>
                <td class="item-total">@item.TotalPrice.ToString("C")</td>
            </tr>
        }
        </tbody>
        <tfoot>
        <tr>
            <td colspan="4" class="text-end"><strong>Grand Total:</strong></td>
            <td id="grandTotal">@Model.GrandTotal.ToString("C")</td>
        </tr>
        </tfoot>
    </table>

    <!-- Clear Cart -->
    <div class="text-end mt-3">
        <form asp-controller="Cart" asp-action="Clear" method="post" style="display:inline;">
            @Html.AntiForgeryToken()
            <button type="submit" class="btn btn-warning">
                <i class="fas fa-trash-alt"></i> Clear Cart
            </button>
        </form>
    </div>
}

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const quantityInputs = document.querySelectorAll('.quantity-input');

            quantityInputs.forEach(input => {
                input.addEventListener('change', async (e) => {
                    const row = e.target.closest('tr');
                    const itemId = row.dataset.itemId;
                    const quantity = parseInt(e.target.value);
                    const token = document.querySelector('#antiForgeryForm input[name="__RequestVerificationToken"]').value;

                    if (quantity === 0) {
                        const itemTotalText = row.querySelector('.item-total').textContent;
                        const itemTotal = parseFloat(itemTotalText.replace(/[^0-9.]/g, '')) || 0;

                        const grandTotalCell = document.querySelector('#grandTotal');
                        const currentGrandTotal = parseFloat(grandTotalCell.textContent.replace(/[^0-9.]/g, '')) || 0;

                        const newGrandTotal = Math.max(0, currentGrandTotal - itemTotal);
                        grandTotalCell.textContent = "$" + newGrandTotal.toFixed(2);

                        row.style.transition = "opacity 0.3s";
                        row.style.opacity = "0";

                        setTimeout(() => {
                            row.remove();

                            const remainingRows = document.querySelectorAll('tbody tr');
                            if (remainingRows.length === 0) {
                                const table = document.querySelector('table');
                                if (table) table.remove();

                                const clearBtn = document.querySelector('.btn-warning');
                                if (clearBtn) clearBtn.closest('form').remove();

                                const cartContainer = document.querySelector('h2').parentElement;
                                const emptyMessage = document.createElement('p');
                                emptyMessage.textContent = "Your cart is empty.";
                                cartContainer.appendChild(emptyMessage);
                            }
                        }, 300);

                        try {
                            await fetch('/Cart/UpdateQuantity', {
                                method: 'POST',
                                headers: {
                                    'Content-Type': 'application/x-www-form-urlencoded',
                                    'RequestVerificationToken': token
                                },
                                body: `id=${itemId}&quantity=0`
                            });
                        } catch (err) {
                            console.error(err);
                        }

                        return;
                    }

                    try {
                        const response = await fetch('/Cart/UpdateQuantity', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/x-www-form-urlencoded',
                                'RequestVerificationToken': token
                            },
                            body: `id=${itemId}&quantity=${quantity}`
                        });

                        if (response.ok) {
                            const data = await response.json();

                            if (data.success) {
                                if (quantity > 0) {
                                    row.querySelector('.item-total').textContent = "$" + data.itemTotal.toFixed(2);
                                }

                                const grandTotalCell = document.querySelector('#grandTotal');
                                if (grandTotalCell) {
                                    grandTotalCell.textContent = "$" + data.grandTotal.toFixed(2);
                                }
                                // Refresh cart badge after quantity update
                                if (typeof updateCartBadge === 'function') {
                                    await updateCartBadge();
                                }
                            }
                        }
                    } catch (error) {
                        console.error(error);
                    }
                });
            });
        });
    </script>
}