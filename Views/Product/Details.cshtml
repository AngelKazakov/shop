@model ProductViewModel

@{
    ViewData["Title"] = "Product Details";
}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"/>
<style>
    /* Carousel styling */
    .carousel-inner img {
        height: 500px;
        object-fit: cover;
    }

    .carousel-indicators li {
        background-color: #555;
    }

    .carousel-control-prev-icon,
    .carousel-control-next-icon {
        filter: invert(100%);
    }

    /* Product info styling */
    .product-info h2 {
        font-size: 2em;
        font-weight: bold;
        color: #333;
    }

    .product-info p {
        font-size: 1.1em;
        color: #555;
    }

    .product-info p strong {
        color: #000;
    }

    /* Table styling */
    .table th, .table td {
        vertical-align: middle;
        text-align: center;
    }

    .table th {
        background-color: #f8f9fa;
        color: #333;
    }

    .table-striped tbody tr:nth-of-type(odd) {
        background-color: #f8f9fa;
    }

    /* Reviews section styling */
    .reviews-section {
        margin-top: 30px;
    }

    .review-item {
        border-bottom: 1px solid #ddd;
        padding: 15px 0;
    }

    .review-item:last-child {
        border-bottom: none;
    }

    .review-user {
        font-weight: bold;
        color: #007bff;
    }

    .review-date {
        color: #777;
        font-size: 0.9em;
    }

    .review-rating {
        color: #ffc107;
        font-size: 1.2em;
        margin-bottom: 10px;
    }

    .filled-star {
        color: #ffc107;
    }

    .empty-star {
        color: #ccc;
    }

    .like-button {
        background: none;
        border: none;
        color: #666;
        cursor: pointer;
        font-size: 1.1em;
        display: inline-flex;
        align-items: center;
        gap: 5px;
        padding: 0;
    }

    .like-button .fa-thumbs-up.liked {
        color: #007bff;
    }

    .liked-count-bump {
        font-weight: bold;
        transition: transform 0.2s;
        transform: scale(1.2);
    }


</style>

<div class="container mt-4">
    <div id="carouselExampleIndicators" class="carousel slide mb-4" data-ride="carousel">
        <ol class="carousel-indicators">
            @for (int i = 0; i < Model.Images.Count; i++)
            {
                <li data-target="#carouselExampleIndicators" data-slide-to="@i" class="@(i == 0 ? "active" : "")"></li>
            }
        </ol>
        <div class="carousel-inner">
            @for (int i = 0; i < Model.Images.Count; i++)
            {
                <div class="carousel-item @(i == 0 ? "active" : "")">
                    <img class="d-block w-100" src="data:image/png;base64,@(Convert.ToBase64String(Model.Images[i]))"
                         alt="Product Image @i">
                </div>
            }
        </div>
        <a class="carousel-control-prev" href="#carouselExampleIndicators" role="button" data-slide="prev">
            <span class="carousel-control-prev-icon" aria-hidden="true"></span>
            <span class="sr-only">Previous</span>
        </a>
        <a class="carousel-control-next" href="#carouselExampleIndicators" role="button" data-slide="next">
            <span class="carousel-control-next-icon" aria-hidden="true"></span>
            <span class="sr-only">Next</span>
        </a>
    </div>

    <div class="product-info p-3 mb-4 bg-light rounded shadow-sm">
        <h2>@Model.Name</h2>
        <p><strong>Price:</strong> $@Model.Price</p>
        <p><strong>Brand:</strong> @Model.Brand</p>
        <p><strong>SKU:</strong> @Model.SKU</p>
        <p><strong>Category:</strong> @Model.Category</p>
        @if (!string.IsNullOrEmpty(Model.Promotion))
        {
            <p><strong>Promotion:</strong> @Model.Promotion</p>
        }
        <p><strong>Description:</strong> @Model.Description</p>
        <p><strong>Average Rating:</strong> @Model.Rating.ToString("F1") ⭐</p>
    </div>

    <!-- Variations Table -->
    <table class="table table-bordered table-striped mt-4 shadow-sm">
        <thead class="thead-light">
        <tr>
            <th>Variation</th>
            <th>Option</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var variation in Model.VariationsAndOptions)
        {
            <tr>
                <td>@variation.Key</td>
                <td>@string.Join(", ", variation.Value)</td>
            </tr>
        }
        </tbody>
    </table>
    <!-- Reviews Section -->
    <div class="reviews-section mt-5">
        <h4>User Reviews</h4>

        @Html.AntiForgeryToken() <!-- Required for secure POST via JavaScript -->

        <select id="reviewSortDropdown" class="form-select mb-3">
            <option value="date">Sort by Date</option>
            <option value="rating">Sort by Rating</option>
            <option value="likes">Sort by Likes</option>
        </select>

        <div id="reviewsContainer">
            @* @Html.Partial("_UserReviewListPartial", Model.Reveiws) *@

            @if (Model.Reveiws.Any())
            {
                @foreach (var review in Model.Reveiws)
                {
                    <div class="review-item">
                        <span class="review-user">@review.UserName</span>
                        <span class="review-date"> - @review.CreatedOn.ToString("dd MMM yyyy")</span>

                        <div class="review-rating">
                            Rating:
                            @for (int i = 1; i <= 5; i++)
                            {
                                if (i <= review.RatingValue)
                                {
                                    <i class="fa fa-star filled-star"></i>
                                }
                                else
                                {
                                    <i class="fa fa-star empty-star"></i>
                                }
                            }
                        </div>

                        <p>@review.Comment</p>

                        <button class="like-button" data-review-id="@review.ReviewId" type="button">
                            <i class="fa fa-thumbs-up @(review.IsLikedByCurrentUser ? "liked" : "")"></i>
                            <span class="like-count">@review.TotalLikes</span>
                        </button>
                    </div>
                }
            }
            else
            {
                <p>No reviews yet for this product.</p>
            }
        </div>
    </div>


    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css"/>
</div>

<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"></script>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            const dropdown = document.getElementById("reviewSortDropdown");
            const productId = '@Model.Id';
            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            // Initial like button event attach
            attachLikeButtonEvents();

            dropdown.addEventListener("change", function () {
                const sortBy = this.value;

                fetch(`/Review/GetSortedReviews?productId=${productId}&sortBy=${sortBy}`, {
                    headers: {
                        'RequestVerificationToken': token
                    }
                })
                    .then(response => {
                        if (!response.ok) throw new Error("Failed to load reviews.");
                        return response.text();
                    })
                    .then(html => {
                        const container = document.getElementById("reviewsContainer");
                        console.log("container: ", container);
                        container.innerHTML = ""; // 🔧 Clear old reviews
                        console.log("container: ", container);
                        container.innerHTML = html;

                        attachLikeButtonEvents(); //  Re-attach like logic after DOM update
                    })
                    .catch(error => console.error("Review load failed:", error));
            });
        });

        function attachLikeButtonEvents() {
            document.querySelectorAll('.like-button').forEach(button => {
                button.replaceWith(button.cloneNode(true)); // Prevent double event handlers
            });

            document.querySelectorAll('.like-button').forEach(button => {
                button.addEventListener('click', async function () {
                    const reviewId = this.getAttribute('data-review-id');
                    const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

                    const response = await fetch(`/Review/Like/?reviewId=${reviewId}`, {
                        method: 'POST',
                        headers: {
                            'RequestVerificationToken': token
                        }
                    });

                    if (response.ok) {
                        const result = await response.json();

                        const icon = this.querySelector('.fa-thumbs-up');
                        icon.classList.toggle('liked', result.liked);

                        const likeCountSpan = this.querySelector('.like-count');
                        likeCountSpan.textContent = result.totalLikes;
                        likeCountSpan.classList.add('liked-count-bump');
                        setTimeout(() => likeCountSpan.classList.remove('liked-count-bump'), 200);
                    }
                });
            });
        }
    </script>
}
