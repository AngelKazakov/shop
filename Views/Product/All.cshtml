@model ICollection<ProductListViewModel>

<style>
    .product-list-container {
        max-width: 900px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 10px;
        background-color: #ffffff;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    }

    .product-list-header {
        text-align: center;
        margin-bottom: 20px;
    }

    .product-item {
        display: flex;
        align-items: center;
        padding: 15px;
        border-bottom: 1px solid #ddd;
        background-color: #fafafa;
        border-radius: 8px;
        margin-bottom: 10px;
        transition: background-color 0.3s;
    }

    .product-item:hover {
        background-color: #f0f8ff;
    }

    .product-checkbox {
        margin-right: 20px;
        transform: scale(1.2);
        cursor: pointer;
    }

    .product-image {
        width: 80px;
        height: 80px;
        border-radius: 5px;
        object-fit: cover;
        border: 1px solid #ddd;
        margin-right: 15px;
    }

    .product-info {
        flex-grow: 1;
        color: #333;
    }

    .product-name {
        font-weight: bold;
        font-size: 1.2em;
        color: #333;
    }

    .product-price {
        color: #28a745;
        font-size: 1.1em;
    }

    .action-buttons {
        display: flex;
        gap: 10px;
    }

    .btn {
        padding: 8px 12px;
        border: none;
        border-radius: 5px;
        color: white;
        cursor: pointer;
        font-size: 0.9em;
        text-decoration: none;
        transition: background-color 0.3s;
    }

    .btn-buy {
        background-color: #007bff;
    }

    .btn-buy:hover {
        background-color: #0056b3;
    }

    .btn-edit {
        background-color: #ffc107;
        color: black;
    }

    .btn-edit:hover {
        background-color: #e0a800;
    }

    .btn-details {
        background-color: #17a2b8;
    }

    .btn-details:hover {
        background-color: #117a8b;
    }

    .btn-delete {
        background-color: #dc3545;
    }

    .btn-delete:hover {
        background-color: #c82333;
    }

    #deleteSelectedForm button[type="submit"] {
        padding: 10px 20px;
        font-size: 1em;
        font-weight: bold;
        background-color: #dc3545;
        color: white;
        border: none;
        border-radius: 8px;
        cursor: pointer;
        margin-top: 15px;
        transition: background-color 0.3s;
    }

    #deleteSelectedForm button[type="submit"]:hover {
        background-color: #c82333;
    }

    .favorite-icon {
        font-size: 1.5em;
        cursor: pointer;
        margin-left: 10px;
        user-select: none;
        transition: color 0.3s;
    }

    .favorite-icon.filled {
        color: red;
    }

    .favorite-icon.outlined {
        color: gray;
    }
</style>

<div class="product-list-container">
    <div class="product-list-header">
        <h2>@(ViewBag.Title ?? "Products")</h2>
    </div>

    @if (Model.Any())
    {
        @foreach (var product in Model)
        {
            <div class="product-item">

                <input type="checkbox" class="product-checkbox" name="@product.Id" value="@product.Id"
                       onchange="toggleDeleteButton()"/>

                <img
                    src="https://images.unsplash.com/photo-1505740420928-5e560c06d30e?fm=jpg&q=60&w=3000&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Nnx8cHJvZHVjdHxlbnwwfHwwfHx8MA%3D%3D"
                    alt="Default Image" class="product-image"/>

                <div class="product-info">
                    <span class="product-name">@product.Name</span><br/>
                    <span class="product-price">$@product.Price.ToString("F2")</span>
                </div>

                <!-- Favorite Icon -->
                <span class="favorite-icon @(product.IsFavorite ? "filled" : "outlined")"
                      data-product-id="@product.Id"
                      onclick="toggleFavorite(this)">
                    @(product.IsFavorite ? "❤️" : "🤍")
                </span>

                <div class="action-buttons">
                    <form asp-controller="Cart" asp-action="Add" asp-route-id="@product.Id" method="post"
                          style="display:inline;">
                        <button type="button" class="btn btn-buy" data-product-id="@product.Id">Buy</button>
                    </form>
                    <a asp-controller="Product" asp-action="Details" asp-route-id="@product.Id" class="btn btn-details">Details</a>
                    <a asp-controller="Product" asp-action="Edit" asp-route-id="@product.Id"
                       class="btn btn-edit">Edit</a>
                    <form asp-controller="Product" asp-action="Delete" asp-route-id="@product.Id" method="post"
                          style="display:inline;">
                        <button type="submit" class="btn btn-delete">Delete</button>
                    </form>
                </div>
            </div>
        }

        <button id="deleteSelelectedProductsButton" type="button" class="btn btn-danger mt-3" style="display:none;"
                onclick="deleteSecletedProducts()">Delete Selected
        </button>
    }
    else
    {
        <p>No products available.</p>
    }
</div>

<script>
    function toggleDeleteButton() {
        const checkboxes = document.querySelectorAll('.product-checkbox');
        const deleteButton = document.querySelector('#deleteSelelectedProductsButton');
        const anySelected = Array.from(checkboxes).some(checkbox => checkbox.checked);
        deleteButton.style.display = anySelected ? 'inline-block' : 'none';
    }

    function deleteSecletedProducts() {
        var selectedIds = $('input[type="checkbox"]:checked').map(function () {
            return $(this).val();
        }).toArray();

        $.ajax({
            type: 'POST',
            url: '/Product/DeleteSelected',
            data: JSON.stringify(selectedIds),
            contentType: 'application/json',
            success: function () {
                location.reload();
            },
            error: function (err) {
                alert("Error in delete: " + err.responseText);
            }
        });
    }

    function toggleFavorite(icon) {
        const productId = icon.getAttribute('data-product-id');
        const isCurrentlyFavorite = icon.classList.contains('filled');

        const url = isCurrentlyFavorite
            ? '/User/RemoveFavorite'
            : '/User/AddFavorite';

        $.ajax({
            type: 'POST',
            url: url,
            data: JSON.stringify({productId: productId}),
            contentType: 'application/json',
            success: function (response) {
                if (response.isFavorite) {
                    icon.textContent = '❤️';
                    icon.classList.remove('outlined');
                    icon.classList.add('filled');
                } else {
                    icon.textContent = '🤍';
                    icon.classList.remove('filled');
                    icon.classList.add('outlined');
                }
            },
            error: function () {
                alert('Something went wrong while updating favorites.');
            }
        });
    }

    //  Guest Cart / Logged-In Cart Integration
    document.addEventListener('DOMContentLoaded', function () {
        const buyButtons = document.querySelectorAll('.btn-buy');
        const isLoggedIn = '@User.Identity.IsAuthenticated'.toLowerCase() === 'true';

        buyButtons.forEach(button => {
            button.addEventListener('click', function (e) {
                const productId = button.getAttribute('data-product-id');

                if (isLoggedIn) {
                    const form = button.closest('form');
                    form.submit(); // logged-in users → DB cart
                } else {
                    // guest users → use cookie-based AddToGuestCart
                    fetch(`/Cart/AddToGuestCart?id=${productId}&quantity=1`, {
                        method: 'GET'
                    })
                        .then(response => {
                            if (response.ok) {
                                button.textContent = "Added ✓";
                                updateCartBadge();
                                button.disabled = true;
                                setTimeout(() => {
                                    button.textContent = "Buy";
                                    button.disabled = false;
                                }, 1500);
                            } else {
                                alert("Failed to add item to guest cart.");
                            }
                        })
                        .catch(err => console.error("Error updating guest cart:", err));
                }
            });
        });
    });
</script>
