@model UpdateCategoryModel
@{
    ViewData["Title"] = "Update Category";
}

<style>
    /* Style for form container */
    .form-container {
        max-width: 400px;
        margin: auto;
        padding: 20px;
        border: 1px solid #ddd;
        border-radius: 5px;
        background-color: #f9f9f9;
    }

    /* Style for form inputs */
    .form-group {
        margin-bottom: 15px;
    }

    /* Style for form labels */
    label {
        font-weight: bold;
    }

    /* Style for form input fields */
    .form-control {
        width: 100%;
        padding: 8px;
        border: 1px solid #ccc;
        border-radius: 4px;
        box-sizing: border-box;
    }

    /* Style for error messages */
    .text-danger {
        color: red;
    }

    /* Style for submit button */
    .btn-primary {
        background-color: #007bff;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
    }

    /* Center header text */
    .header-container {
        text-align: center;
        margin-bottom: 20px;
    }
</style>

<div class="header-container">
    <h1>Update Category</h1>
</div>

<div class="form-container">
    <form asp-controller="Category" asp-action="Update" method="post">
        @Html.AntiForgeryToken()

        <input asp-for="@Model.CurrentParrentCategoryId" type="hidden" />

        <div class="form-group">
            <label asp-for="@Model.Id">Select category to edit:</label>
            <select id="categoryDropdown" asp-for="@Model.Id" class="form-control">
                <option value="" selected>--None--</option>
                @foreach (var category in Model.MainCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label asp-for="@Model.CurrentName">Current category name</label>
            <input id="categoryNameInput" asp-for="@Model.CurrentName" type="text" class="form-control" placeholder="Category name" readonly />
            <span asp-validation-for="@Model.CurrentName" class="text-danger"></span>
        </div>


        <div class="form-group">
            <label asp-for="@Model.CurrentName">New category name</label>
            <input id="categoryNameInput" asp-for="@Model.NewName" type="text" class="form-control" placeholder="Category name" />
            <span asp-validation-for="@Model.NewName" class="text-danger"></span>
        </div>



        <div class="form-group">
            <label asp-for="@Model.CurrentParrentCategoryId">New main category</label>
            <select id="newCategoryDropdown" asp-for="@Model.NewParrentCategoryId" class="form-control">
                <option value="" selected>--None--</option>
                @foreach (var category in Model.MainCategories)
                {
                    <option value="@category.Id">@category.Name</option>
                }
            </select>
        </div>

        <button type="submit" class="btn btn-primary" asp-controller="Category" asp-action="Edit">Update Category</button>
    </form>
</div>

<!-- Add the JavaScript below -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script>

    document.addEventListener('DOMContentLoaded', function () {
        // Get references to the dropdown and input elements
        var categoryDropdown = document.getElementById('categoryDropdown');
        var categoryNameInput = document.getElementById('categoryNameInput');

        // Listen for changes to the dropdown
        categoryDropdown.addEventListener('change', function () {
            var selectedCategoryText = categoryDropdown.options[categoryDropdown.selectedIndex].text;

            // Set the category name input to the selected category name
            if (selectedCategoryText !== "--None--") {
                categoryNameInput.value = selectedCategoryText;
            } else {
                categoryNameInput.value = ""; // Clear the input if none is selected
            }
        });
    });

    document.addEventListener('DOMContentLoaded', function () {
        // Get references to the dropdowns and input elements
        var categoryDropdown = document.getElementById('categoryDropdown');
        var newCategoryDropdown = document.getElementById('newCategoryDropdown');

        // Function to enable/disable options based on selection in current main category
        function updateNewCategoryDropdown() {
            var selectedCategoryId = categoryDropdown.value;

            // Enable all options in the new main category dropdown first
            Array.from(newCategoryDropdown.options).forEach(function (option) {
                option.disabled = false;
            });

            // If a category is selected in the current main category, disable it in the new main category dropdown
            if (selectedCategoryId) {
                Array.from(newCategoryDropdown.options).forEach(function (option) {
                    if (option.value === selectedCategoryId) {
                        option.disabled = true;
                    }
                });
            }
        }

        // Call the update function whenever the current main category dropdown changes
        categoryDropdown.addEventListener('change', updateNewCategoryDropdown);

        // Initial call to set the state when the page loads
        updateNewCategoryDropdown();
    });
</script>
